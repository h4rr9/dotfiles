
snippet dijkstra "Dijkstra for single source shortest path" b
void dijkstra(int n, int start, vt<pii> adj[], vt<ll> &distance) {
    FOR(n) distance[i] = LLONG_MAX;
 
    priority_queue<pair<ll, int>, vt<pair<ll, int>>, greater<pair<ll, int>>> pq;
    vt<bool> visited(n, false);
 
    distance[start] = 0;
 
    pq.push(mp(0, start));
 
    while (!pq.empty()) {
        auto a = pq.top().S;
        pq.pop();
 
        if (!visited[a]) {
            visited[a] = true;
            EACH(u, adj[a]) {
                int b = u.F, w = u.S;
                    if (distance[a] + w < distance[b]) {
                        distance[b] = distance[a] + w;
                        pq.push(mp(distance[b], b));
                    }
            }
        }
    }
}
endsnippet

snippet bellmann_ford "Bellman-Ford for single source shortest path" b
void bellman_ford(int n, int start, vt<pll> adj[], vt<ll> &distances,
                  int num_iters = 1) {
 
    if (num_iters > 1) {
        fill(all(distances), LLONG_MAX);
        distances[start] = 0;
    }
 
    FOR(k, num_iters) {
        bool decreased = false;
        {
            FOR(i, n)
            if (distances[i] != LLONG_MAX)
                EACH(e, adj[i]) {
                    if (distances[i] + e.S < distances[e.F]) {
                        decreased = true;
                        distances[e.F] = distances[i] + e.S;
                    }
                }
        }
        if (!decreased)
            break;
    }
}
endsnippet

snippet floyd_warshall  "Floyd-Warshall for all nodes shortest path" b
void floyd_warshall(int n, vt<pll> adj[], vt<vt<ll>> &distances) {
 
    FOR(n) {
        fill(all(distances[i]), LLONG_MAX);
        distances[i][i] = 0;
        EACH(x, adj[i]) { distances[i][x.F] = min(distances[i][x.F], x.S); }
    }
 
    FOR(k, n)
    FOR(i, n)
    FOR(j, n)
    if (distances[i][k] != LLONG_MAX)
        if (distances[k][j] != LLONG_MAX)
            distances[i][j] =
                min(distances[i][j], distances[i][k] + distances[k][j]);
}
endsnippet


