snippet mo_queries "Mo's Algorthm for Offline queries in O((N + M) * sqrt(N))" b
template <typename T> struct MoQueries {

#define K(x) pii(x.F / bulk, x.S ^ -(x.F / bulk & 1))

    const size_t bulk = 555; // ~ N / sqrt(Q)
    vt<int> v, counts;
    int ans;

    MoQueries(vt<T> &v) : v(v), counts(sz(v), 0), ans(0) {}

    void add(size_t ind, bool end) {
        ++counts[v[ind]];
        if (counts[v[ind]] == 1)
            ++ans;
    }

    void del(size_t ind, bool end) {
        --counts[v[ind]];
        if (counts[v[ind]] == 0)
            --ans;
    }

    int calc() { return ans; }

    void process(vt<pair<size_t, size_t>> &queries, vt<T> &res) {

        size_t L = 0, R = 0;
        vt<int> s(sz(queries));
        iota(all(s), 0);

        sort(all(s),
             [&](int s, int t) { return K(queries[s]) < K(queries[t]); });

        EACH(qi, s) {

            auto q = queries[qi];

            while (L > q.F)
                add(--L, false);
            while (R < q.S)
                add(R++, true);
            while (L < q.F)
                del(L++, false);
            while (R > q.S)
                del(--R, true);

            res[qi] = calc();
        }
    }
};
endsnippet

snippet coord_compression "Coordinate Compression using custom hash object" b
/**
 * @brief coordinate compression yoinked from
 * https://github.com/shugo256/AlgorithmLibrary/blob/master/DataStructures/coordinate_compression.cpp
 *
 * @tparam T - datatype of org
 * @param org - vector containing data needing compression
 * @param zip - org -> compressed mapping
 * @param unzip - compressed -> org mapping
 * @return - size of compression
 */
template <typename T, class hash>
int compress(vector<T> org, unordered_map<T, int, hash> &zip,
             vector<T> &unzip) {
    sort(org.begin(), org.end());
    org.erase(unique(org.begin(), org.end()), org.end());
    int i = 0;
    for (auto &oi : org) {
        zip[oi] = i;
        unzip.push_back(i);
        i++;
    }
    return i;
}
endsnippet
